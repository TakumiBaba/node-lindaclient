// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, LindaClient, TupleSpace, WebsocketClient, WebsocketIO, moment,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  WebsocketClient = require("websocket").client;

  EventEmitter = require("events").EventEmitter;

  moment = require("moment");

  WebsocketIO = (function(_super) {
    __extends(WebsocketIO, _super);

    function WebsocketIO() {
      this.message = __bind(this.message, this);
      this.disconnect = __bind(this.disconnect, this);
      this.error = __bind(this.error, this);
      this.client = new WebsocketClient();
      this.session = "";
    }

    WebsocketIO.prototype.connect = function(url) {
      var _this = this;
      this.url = url;
      this.client.on("connect", function(connection) {
        connection.on("error", _this.error);
        connection.on("close", _this.disconnect);
        connection.on("message", _this.message);
        return _this.client.on("push", function(message) {
          return connection.sendUTF(message);
        });
      });
      return this.client.connect(this.url);
    };

    WebsocketIO.prototype.error = function(error) {
      return console.log("error");
    };

    WebsocketIO.prototype.disconnect = function() {
      return console.log("disconnect");
    };

    WebsocketIO.prototype.message = function(message) {
      var json;
      json = JSON.parse(message.utf8Data);
      if (json.type === "__session_id") {
        this.session = json.data;
        return this.emit("connect");
      } else if (json.type.match(/^__linda/)) {
        return this.emit(json.type, json.data);
      }
    };

    WebsocketIO.prototype.push = function(type, data) {
      return this.client.emit("push", JSON.stringify({
        "type": type,
        "data": data,
        "session": this.session
      }));
    };

    return WebsocketIO;

  })(EventEmitter);

  LindaClient = (function(_super) {
    __extends(LindaClient, _super);

    function LindaClient(url) {
      this.url = url;
      this.io = new WebsocketIO();
    }

    LindaClient.prototype.connect = function() {
      return this.io.connect("ws://" + this.url);
    };

    return LindaClient;

  })(EventEmitter);

  TupleSpace = (function() {
    var callbackId;

    function TupleSpace(name, linda) {
      this.name = name;
      this.linda = linda;
      this.time = moment().format();
    }

    TupleSpace.prototype.write = function(tuple, opts) {
      if (typeof tuple !== 'object') {
        throw new Error("TupleSpace.write's Arguments[0] should be object");
      }
      opts = opts || {};
      return this.linda.io.push("__linda_write", [this.name, tuple, opts]);
    };

    TupleSpace.prototype.read = function(tuple, callback) {
      var cid,
        _this = this;
      if (typeof tuple !== 'object') {
        throw new Error("TupleSpace.read's Arguments[0] should be object");
      }
      if (typeof callback !== 'function') {
        throw new Error("TupleSpace.read's Arguments[1] should be callback function");
      }
      cid = callbackId();
      this.linda.io.once("__linda_read_callback_" + cid, function(data) {
        return callback(data.tuple, data.info);
      });
      return this.linda.io.push("__linda_read", [this.name, tuple, cid]);
    };

    TupleSpace.prototype.watch = function(tuple, callback) {
      var cid;
      if (typeof tuple !== 'object') {
        throw new Error("TupleSpace.watch's Arguments[0] should be object");
      }
      if (typeof callback !== 'function') {
        throw new Error("TupleSpace.watch's Arguments[1] should be callback function");
      }
      cid = callbackId();
      this.linda.io.once("__linda_watch_callback_" + cid, function(data) {
        return callback(data.tuple, data.info);
      });
      return this.linda.io.push("__linda_watch", [this.name, tuple, cid]);
    };

    TupleSpace.prototype.take = function(tuple, callback) {
      var cid;
      if (typeof tuple !== 'object') {
        throw new Error("TupleSpace.take's Arguments[0] should be object");
      }
      if (typeof callback !== 'function') {
        throw new Error("TupleSpace.take's Arguments[1] should be callback function");
      }
      cid = callbackId();
      this.linda.io.once("__linda_take_callback_" + cid, function(data) {
        return callback(data.tuple, data.info);
      });
      return this.linda.io.push("__linda_take", [this.name, tuple, cid]);
    };

    callbackId = function() {
      return "" + (moment().diff(this.time)) + (moment().unix()) + "_" + (Math.random(1000000));
    };

    return TupleSpace;

  })();

  module.exports = {
    "LindaClient": LindaClient,
    "TupleSpace": TupleSpace
  };

}).call(this);
